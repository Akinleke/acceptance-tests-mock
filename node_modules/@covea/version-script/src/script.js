const MR_REGEX = /merge request .+!(\d+)/;

const https = require('https');
const childProcessExec = require('child_process').exec;
const util = require('util');

const getMergeRequestUrl = () => {
	return new Promise((resolve, reject) => {
		const commitMessage = process.env.CI_COMMIT_MESSAGE;
                if (!commitMessage || !MR_REGEX.test(commitMessage)) {
			console.error("Error extracting the merge request id");
			console.error(`Commit message ${commitMessage}`);
			reject('Failed to find merge request id in commit message');
		}

		const mergeRequestIid = commitMessage.match(MR_REGEX)[1];
		console.log(`Merge Request iid: ${mergeRequestIid}`);

		resolve(`${process.env.CI_API_V4_URL}`
			+ `/projects/${process.env.CI_PROJECT_ID}` 
			+ `/merge_requests/${mergeRequestIid}` 
			+ `?private_token=${process.env.GITLAB_API_TOKEN}`);
	})
}

const getMergeRequest = (url) => {
	return new Promise((resolve, reject) => {
		const request = https.get(url, (response) => {
			// Range of Status codes for valid http response
			const HTTP_SUCCESS_LOW = 200;
			const HTTP_SUCCESS_HIGH = 299; 
			if (response.statusCode < HTTP_SUCCESS_LOW || response.statusCode > HTTP_SUCCESS_HIGH) {
				console.error(url.substring(0, url.indexOf("?private_token")));
				reject(new Error(`Failed to connect to GitLab: ${response.statusCode}`));
			} else {
				const rawData = [];
				response.on('data', (chunk) => rawData.push(chunk));
				response.on('end', () => resolve(JSON.parse(rawData.join(''))));
			}
			response.on('error', (err) => reject(err))
		});
	})
}

const getUpdateType = ({labels}) => {
	return new Promise((resolve, reject) => {
		for (let index = 0; index < labels.length; index++) {
			const label = labels[index];
			if (label === 'major' ||
			    label === 'minor' ||
			    label === 'patch' ) {
				console.log(`Update type: ${label}`);
				return resolve(label);
			}
		}
		console.error("Failed to find update type");
		console.error("Defaulting to PATCH");
		return reject("patch");
	})
}

const increaseVersion = (versionType) => {
	const exec = util.promisify(childProcessExec);

	const url = `git@gitlab.tools.digital.coveahosted.co.uk:${process.env.CI_PROJECT_PATH}.git`;
	return new Promise((resolve, reject) => {
		exec(`npm version ${versionType}`)
		.then(newVersion => {
			exec(`git push ${url} HEAD:master --follow-tags`)
			.then(response => {
				resolve("Done");
			})
			.catch(err => {
				reject(`Failed to push with error: ${err}`);
			})
		})
		.catch(err => {
			console.error("Failed to change version");
			reject(err)
		})
	})
}

module.exports = {
	getMergeRequestUrl,
	getMergeRequest,
	getUpdateType,
	increaseVersion
}
