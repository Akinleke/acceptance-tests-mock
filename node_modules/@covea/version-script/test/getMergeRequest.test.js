jest.mock('https');

const script = require('../src/script');
const https = require('https');
const {Readable} = require('stream');

const logSpy = jest.spyOn(console, "log");
const errSpy = jest.spyOn(console, "error");

const getSpy = jest.spyOn(https, "get");

const mockHTTPMessage = new Readable({
	read: function (size) {
		this.push(JSON.stringify({
			hello: "world"
		}));
		this.push(null);
	}
});

describe('getMergeRequest', () => {
	beforeEach(() => {
		jest.clearAllMocks();

		mockHTTPMessage.statusCode = 200;

		getSpy.mockImplementation((url, callback) => {
			callback(mockHTTPMessage);
		});

	});

	afterEach(() => {
	});

	it('Should return an error if the status code is more than 299', done => {
		mockHTTPMessage.statusCode = 300;

		script.getMergeRequest("https://fake.co.uk/url?private_token=secret-value")
		.then(response => {
			done.fail("Unexpected success");
		})
		.catch(err => {
			// Validate return value
			expect(err.message)
			.toEqual(`Failed to connect to GitLab: ${mockHTTPMessage .statusCode}`);

			// Validate function calls
			expect(logSpy).toHaveBeenCalledTimes(0);
			expect(errSpy).toHaveBeenCalledTimes(1);
			expect(errSpy).toHaveBeenCalledWith("https://fake.co.uk/url");

			// All validation passed
			done();
		})
	})

	it('Should return an error if the status code is less than 200', done => {
		mockHTTPMessage.statusCode = 199;

		script.getMergeRequest("https://fake.co.uk/url?private_token=secret-value")
		.then(response => {
			done.fail("Unexpected success");
		})
		.catch(err => {
			// Validate return value
			expect(err.message)
			.toEqual(`Failed to connect to GitLab: ${mockHTTPMessage .statusCode}`);

			// Validate function calls
			expect(logSpy).toHaveBeenCalledTimes(0);
			expect(errSpy).toHaveBeenCalledTimes(1);
			expect(errSpy).toHaveBeenCalledWith("https://fake.co.uk/url");

			// All validation passed
			done();
		})
	})

	it('Should return a JSON object if nothing goes wrong', done => {
		script.getMergeRequest("https://fake.co.uk/url?private_token=secret-value")
		.then(response => {
			// Validate return value
			expect(response)
			.toEqual({
				hello: "world"
			});

			// Validate function calls
			expect(logSpy).toHaveBeenCalledTimes(0);
			expect(errSpy).toHaveBeenCalledTimes(0);

			// All validation passed
			done();
		})
		.catch(err => {
			done.fail(`Unexpected error ${err}`);
		})
	})

	it('Should reject if stream raises an error event', done => {
		getSpy.mockImplementation((url, callback) => {
			const mockStream = new Readable({});
			callback(mockStream);
			mockStream.emit('error', 'Fake error');
		});

		script.getMergeRequest("https://fake.co.uk/url?private_token=secret-value")
		.then(response => {
			done.fail(`Unexpected error ${err}`);
		})
		.catch(err => {
			// Validate return value
			expect(err)
			.toEqual("Fake error");

			// Validate function calls
			expect(logSpy).toHaveBeenCalledTimes(0);
			expect(errSpy).toHaveBeenCalledTimes(0);

			// All validation passed
			done();
		})
	})
})
