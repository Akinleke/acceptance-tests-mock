const script = require("../src/script");

const logSpy = jest.spyOn(console, "log");
const errSpy = jest.spyOn(console, "error");

describe("Get the type of the update", () => {

	beforeEach( () => {
		jest.clearAllMocks();
	});

	it("Should resolve minor if it is one of the labels", done => {
		const fakeMergeRequest = {
			labels: [
				"value",
				"something else",
				"other things",
				"minor",
				"label after our seeked value",
				"more rubbish"
			]
		};

		const mockType = "minor";

		script.getUpdateType(fakeMergeRequest)
		.then(response => {
			// Validate return value
			expect(response).toBe(mockType);

			// Validate function calls
			expect(logSpy).toHaveBeenCalledTimes(1);
			expect(errSpy).toHaveBeenCalledTimes(0);

			expect(logSpy).toHaveBeenCalledWith(`Update type: ${mockType}`);
			
			// All validation passed
			done();
		})
		.catch(err => {
			console.error(err);
			done.fail("Unexpected reject");
		})
	});

	it("Should reject with the value patch if no labels match", done => {
		const fakeMergeRequest = {
			labels: [
				"value",
				"something else",
				"other things",
				"label after our seeked value",
				"more rubbish"
			]
		};

		script.getUpdateType(fakeMergeRequest)
		.then(response => {
			done.fail("Unexpected resolve");
		})
		.catch(err => {
			// Validate return value
			expect(err).toBe('patch');

			// Validate function calls
			expect(logSpy).toHaveBeenCalledTimes(0);
			expect(errSpy).toHaveBeenCalledTimes(2);

			expect(errSpy).toHaveBeenNthCalledWith(1, "Failed to find update type");
			expect(errSpy).toHaveBeenNthCalledWith(2, "Defaulting to PATCH");
			
			// All validation passed
			done();
		})
	});
});

