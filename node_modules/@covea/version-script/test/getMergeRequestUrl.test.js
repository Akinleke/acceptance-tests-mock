const script = require("../src/script");

const logSpy = jest.spyOn(console, "log");
const errSpy = jest.spyOn(console, "error");

describe("Building Merge Request URL", () => {
	const OLD_ENV = process.env;
	const mockIid = 123;

	beforeEach(() => {
		jest.resetModules(); // Clear cache
		process.env = {...OLD_ENV};

		// Set valid default values
		process.env.CI_COMMIT_MESSAGE = `Some text, merge request branch/details!${mockIid} some more text`;
		process.env.CI_API_V4_URL = "https://api-v4-url";
		process.env.CI_PROJECT_ID = "pId";
		process.env.GITLAB_API_TOKEN = "token";
	});


	afterEach(() => {
		jest.clearAllMocks();
		process.env = OLD_ENV;
	});

	it('Should return a valid URL', done => {
		script.getMergeRequestUrl()
		.then(response => {
			// Validate return value
			expect(response)
			.toBe("https://api-v4-url/projects/pId/merge_requests/123?private_token=token");

			// Validate functions calls
			expect(logSpy).toHaveBeenCalledTimes(1);
			expect(logSpy).toHaveBeenCalledWith(`Merge Request iid: ${mockIid}`);
			
			// All validation passed
			done();
		})
		.catch(err => {
			done.fail(err);
		})
	});

	it('Should reject with an error message when it cannot find the merge request id', done => {
		process.env.CI_COMMIT_MESSAGE = "No merge request id!";

		script.getMergeRequestUrl()
		.then(response => {
			done.fail("Expected a reject but got a resolve");
		})
		.catch(err => {
			// Validate return value
			expect(err).toBe("Failed to find merge request id in commit message");

			// Validate functions calls
			expect(errSpy).toHaveBeenCalledTimes(2);
			expect(errSpy).toHaveBeenNthCalledWith(1, "Error extracting the merge request id");
			expect(errSpy).toHaveBeenNthCalledWith(2, `Commit message ${process.env.CI_COMMIT_MESSAGE}`);

			// All validation passed
			done();
		})
	});

	it("Should reject with an error message if the environment variable holding the commit message is undefined", done => {
		delete process.env.CI_COMMIT_MESSAGE

		script.getMergeRequestUrl()
		.then(response => {
			done.fail("Expected a reject but got a resolve");
		})
		.catch(err => {
			// Validate return value
			expect(err).toBe("Failed to find merge request id in commit message");
			
			// Validate functions calls
			expect(errSpy).toHaveBeenCalledTimes(2);
			expect(errSpy).toHaveBeenNthCalledWith(1, "Error extracting the merge request id");
			expect(errSpy).toHaveBeenNthCalledWith(2, `Commit message ${process.env.CI_COMMIT_MESSAGE}`);

			// All validation passed
			done();
		})
	});
 });
