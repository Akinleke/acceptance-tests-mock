"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const auto_test_node_1 = require("@covea/auto-test-node");
const base_64_1 = __importDefault(require("base-64"));
class TestRail {
    constructor(username, password, config) {
        this.GetProjectId = async (projectName) => {
            try {
                const allProjects = await auto_test_node_1.request("get", `${this.host}${this.uriPath.getProjectUri}`, this.headers)
                    .then(res => res.parsedBody)
                    .catch(err => {
                    throw err;
                });
                const getProject = allProjects.find((project) => project.name === projectName);
                return getProject.id;
            }
            catch (err) {
                throw new Error(`GetProjectId ERRROR: ${err}`);
            }
        };
        this.GetSuiteId = async (suiteName, projectId) => {
            try {
                const allSuites = await auto_test_node_1.request("get", `${this.host}${this.uriPath.getSuitesUri}${projectId}`, this.headers).then(res => res.parsedBody);
                const suiteDetails = allSuites.find((suite) => suite.name === suiteName);
                return suiteDetails === undefined || null ? undefined : suiteDetails.id;
            }
            catch (err) {
                throw new Error(`GetSuiteId ERROR: ${err}`);
            }
        };
        this.GetSectionId = async (sectionName, suiteId, projectId) => {
            try {
                const allSections = await auto_test_node_1.request("get", `${this.host}${this.uriPath.getSectionsUri}${projectId}&suite_id=${suiteId}`, this.headers).then(res => res.parsedBody);
                const getSection = allSections.find((section) => section.name === sectionName);
                return getSection === undefined || null ? undefined : getSection.id;
            }
            catch (err) {
                throw new Error(`GetSectionId ERROR: ${err}`);
            }
        };
        this.GetRunId = async (runName, projectId, suiteId) => {
            try {
                const allRuns = await auto_test_node_1.request("get", `${this.host}${this.uriPath.getRunsUri}${projectId}&suite_id=${suiteId}`, this.headers).then(res => res.parsedBody);
                const getRun = allRuns.find((run) => run.name === runName);
                return getRun === undefined || null ? undefined : getRun.id;
            }
            catch (err) {
                throw new Error(`GetRun ERROR: ${err}`);
            }
        };
        this.GetCase = async (params, projectId, suiteId) => {
            try {
                const allCases = await auto_test_node_1.request("get", `${this.host}${this.uriPath.getCasesUri}${projectId}&suite_id=${suiteId}`, this.headers).then(res => res.parsedBody);
                const getCase = allCases.find((testCase) => testCase.title === params.pickle.name);
                return getCase === undefined || null ? undefined : getCase;
            }
            catch (err) {
                throw new Error(`GetCase ERROR: ${err}`);
            }
        };
        this.AddCase = async (sectionId, params) => {
            try {
                const steps = params.pickle.steps;
                const stepsDefined = steps.map((step) => {
                    return { content: `${step.text}` };
                });
                const body = {
                    title: params.pickle.name,
                    type_id: 3,
                    priority_id: 3,
                    template_id: 2,
                    estimate: "4m",
                    refs: params.pickle.tags[0].name.substr(1),
                    custom_steps_separated: stepsDefined
                };
                const caseId = await auto_test_node_1.request("post", `${this.host}${this.uriPath.addCaseUri}${sectionId}`, this.headers, body).then(res => res.parsedBody.id);
                return caseId;
            }
            catch (err) {
                throw new Error(`AddCase ERROR: ${err}`);
            }
        };
        this.AddResultForCase = async (result, caseId, runId) => {
            try {
                let resultId = 3;
                switch (result) {
                    case "passed": {
                        resultId = 1;
                        break;
                    }
                    case "failed": {
                        resultId = 5;
                        break;
                    }
                }
                const body = {
                    status_id: resultId
                };
                await auto_test_node_1.request("post", `${this.host}${this.uriPath.addResultForCaseUri}${runId}/${caseId}`, this.headers, body);
            }
            catch (err) {
                throw new Error(`AddResultForCase ERROR: ${err}`);
            }
        };
        this.AddSuite = async (projectId, sprintName) => {
            try {
                const body = {
                    name: sprintName
                };
                const testSuiteId = await auto_test_node_1.request("post", `${this.host}${this.uriPath.addSuiteUri}${projectId}`, this.headers, body).then(res => res.parsedBody.id);
                return testSuiteId;
            }
            catch (err) {
                throw new Error(`Suite not added: ${err}`);
            }
        };
        this.AddSection = async (projectId, suiteId, sectionName) => {
            try {
                const body = {
                    description: sectionName,
                    suite_id: suiteId,
                    name: sectionName
                };
                const sectionId = await auto_test_node_1.request("post", `${this.host}${this.uriPath.addSectionUri}${projectId}`, this.headers, body).then(res => res.parsedBody.id);
                return sectionId;
            }
            catch (err) {
                throw new Error(`Section not added: ${err}`);
            }
        };
        this.AddRun = async (projectId, suiteId) => {
            try {
                const body = {
                    suite_id: suiteId
                };
                const runId = await auto_test_node_1.request("post", `${this.host}${this.uriPath.addRunUri}${projectId}`, this.headers, body).then(res => res.parsedBody.id);
                return runId;
            }
            catch (err) {
                throw new Error(`Test run not added: ${err}`);
            }
        };
        this.username = username;
        this.password = password;
        this.headers = {
            "Accept": "application/json",
            Authorization: "Basic " + base_64_1.default.encode(this.username + ":" + this.password)
        };
        this.uriPath = {
            getProjectUri: "/get_projects",
            getSuitesUri: "/get_suites/",
            addSuiteUri: "/add_suite/",
            addRunUri: "/add_run/",
            getSectionsUri: "/get_sections/",
            addSectionUri: "/add_section/",
            getCasesUri: "/get_cases/",
            addCaseUri: "/add_case/",
            addResultForCaseUri: "/add_result_for_case/",
            getRunsUri: "/get_runs/"
        };
        this.host = config.testRailHost;
    }
}
exports.TestRail = TestRail;
//# sourceMappingURL=testRail.js.map