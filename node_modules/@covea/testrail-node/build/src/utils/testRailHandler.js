"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class TestRailHandler {
    constructor(testRail, config) {
        this.BeforeAllHandler = async () => {
            // Get project id, sprint suite id and regression suite id
            this.projectId = await this.testRail.GetProjectId(this.config.testRailProjectName);
            this.sprintSuiteId = await this.testRail.GetSuiteId(this.config.testRailSuiteName, this.projectId);
            this.regressionSuiteId = await this.testRail.GetSuiteId(this.config.testRailRegressionSuiteName, this.projectId);
            // If sprint suite not found: add suite, else use the sprintSuiteId
            this.sprintSuiteId = !this.sprintSuiteId ?
                await this.testRail.AddSuite(this.projectId, this.config.testRailSuiteName) : this.sprintSuiteId;
            // If regression suite not found: add suite, else use the regressionSuiteId
            this.regressionSuiteId = !this.regressionSuiteId ?
                await this.testRail.AddSuite(this.projectId, this.config.testRailRegressionSuiteName) : this.regressionSuiteId;
            // Gets the sprintRunId and the regressionRunId
            this.sprintRunId = await this.testRail.GetRunId(this.config.testRailSuiteName, this.projectId, this.sprintSuiteId);
            this.regressionRunId = await this.testRail.GetRunId(this.config.testRailRegressionSuiteName, this.projectId, this.regressionSuiteId);
            // If sprint run not found: add sprint run, else use the sprintRunId
            this.sprintRunId = !this.sprintRunId ?
                await this.testRail.AddRun(this.projectId, this.sprintSuiteId) : this.sprintRunId;
            // If regression run not found: add regression run, else use the regressionRunId
            // Checks the config and adds a Run for the Regression Suite if 'regressionRun' is true
            if (this.config.regressionRun === true && !this.regressionRunId) {
                this.regressionRunId = await this.testRail.AddRun(this.projectId, this.regressionSuiteId);
            }
            // Get section Id for both the current sprint and the regression section
            this.sprintSectionId = await this.testRail.GetSectionId(this.config.testRailSectionName, this.sprintSuiteId, this.projectId);
            this.regressionSectionId = await this.testRail.GetSectionId(this.config.testRailSectionName, this.regressionSuiteId, this.projectId);
            // If section Id is not found, add section for both the current section and regression
            this.sprintSectionId = !this.sprintSectionId ?
                await this.testRail.AddSection(this.projectId, this.sprintSuiteId, this.config.testRailSectionName) : this.sprintSectionId;
            this.regressionSectionId = !this.regressionSectionId ?
                await this.testRail.AddSection(this.projectId, this.regressionSuiteId, this.config.testRailSectionName) : this.regressionSectionId;
        };
        this.BeforeHandler = async (params) => {
            // Get scenario case for both the regression and the current suite
            this.regressionCase = await this.testRail.GetCase(params, this.projectId, this.regressionSuiteId);
            this.sprintCase = await this.testRail.GetCase(params, this.projectId, this.sprintSuiteId);
            if (!this.regressionCase) {
                // If case not found in regression: add the current case to both the current test suite and regression
                this.caseId = await this.testRail.AddCase(this.sprintSectionId, params);
                this.regressionCaseId = await this.testRail.AddCase(this.regressionSectionId, params);
            }
            else if (this.sprintCase) {
                // If case found in current sprint suite: declare current sprint case 
                this.regressionCaseId = this.regressionCase.id;
                this.caseId = this.sprintCase.id;
            }
            else {
                // Else case found in regression and NOT found in current sprint suite: declare current sprint case = undefined
                this.regressionCaseId = this.regressionCase.id;
                this.caseId = undefined;
            }
        };
        this.AfterHandler = async (params) => {
            // Checks the config and adds results for the Regression Suite if 'regressionRun' is true
            if (this.config.regressionRun) {
                await this.testRail.AddResultForCase(params.result.status, this.regressionCaseId, this.regressionRunId);
            }
            // If caseId exists in the current sprint then add results
            if (this.caseId) {
                await this.testRail.AddResultForCase(params.result.status, this.caseId, this.sprintRunId);
                this.caseId = 0;
            }
        };
        this.testRail = testRail;
        this.config = config;
    }
}
exports.TestRailHandler = TestRailHandler;
//# sourceMappingURL=testRailHandler.js.map