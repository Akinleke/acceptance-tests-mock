"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cucumber_1 = require("cucumber");
const chai_1 = require("chai");
const auto_test_node_1 = require("@covea/auto-test-node");
const postModelTest_1 = require("../models/postModelTest");
const config_1 = __importDefault(require("../../src/config/config"));
let full_resourcepath;
var postData = new postModelTest_1.PostModelTest();
cucumber_1.Given('I have the json-server running', function () {
    console.log(`Connecting to the service at: ${config_1.default.jsonServerUrl}`);
});
cucumber_1.When('I have a resource at {string}', function (uriPath) {
    full_resourcepath = `${config_1.default.jsonServerUrl}${uriPath}`;
    console.log(`Accessing resource: ${full_resourcepath}`);
});
cucumber_1.When('I want to send a {string} of value {} to the test service', function (dataItem, value) {
    if (dataItem === "id") {
        postData._id = value;
    }
    if (dataItem === "title") {
        postData._title = value;
    }
    if (dataItem === "author") {
        postData._author = value;
    }
});
cucumber_1.When('I make a GET request to the service', async function () {
    this.responseJson = await auto_test_node_1.request("get", full_resourcepath, { "test-header": "item" });
});
cucumber_1.When('I make a PUT request to the service', async function () {
    this.responseJson = await auto_test_node_1.request("put", full_resourcepath, {
        "Content-type": "application/json; charset=UTF-8"
    }, postData);
});
cucumber_1.When('I make a POST request to the service', async function () {
    this.responseJson = await auto_test_node_1.request("post", full_resourcepath, {
        "Content-type": "application/json; charset=UTF-8"
    }, postData);
});
cucumber_1.When('I make a DELETE request to the service', async function () {
    this.responseJson = await auto_test_node_1.request("delete", full_resourcepath);
});
cucumber_1.Then('a response is returned', function () {
    chai_1.expect(this.responseJson).to.not.be.null;
});
cucumber_1.Then('the author is {string}', function (author) {
    chai_1.expect(this.responseJson.body.author).to.equal(author, "Incorrect author");
});
cucumber_1.Then('the resource does NOT exist', async function () {
    this.responseJson = await auto_test_node_1.request("get", full_resourcepath);
});
cucumber_1.Given('I have a table:', function (data) {
    // console.log("Table1", data.raw())       // set data table to rows as array of each index
    // console.log("Table2", data.rows())			// set same as .raw() but skips first row
    console.log("Table3", data.hashes()); // set first row as keys(properties) and others as values of the key
    // console.log("Table4", data.rowsHash())	// set first column as keys(properties) and others as values of the key
    return true;
});
//# sourceMappingURL=poc.steps.js.map